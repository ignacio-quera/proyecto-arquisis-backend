version: '3'
services:
  fastapi_app:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - mqtt-network
      - app-network
    container_name: fastapi_app
    volumes:
      - ./app:/app/app
    depends_on:
      - db

  fastapi_app_2:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8001:8000"
    restart: unless-stopped
    networks:
      - mqtt-network
      - app-network
    container_name: fastapi_app_2
    volumes:
      - ./app:/app/app
    depends_on:
      - db

  fastapi_app_3:
    build:
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8002:8000"
    restart: unless-stopped
    networks:
      - mqtt-network
      - app-network
    container_name: fastapi_app_3
    volumes:
      - ./app:/app/app
    depends_on:
      - db
    
  db:
    image: postgres:latest
    container_name: db
    networks:
      - app-network
    expose:
      - "5432"
    restart: always
    hostname: db
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: db_development_flights_e0
    volumes:
      - db-volume:/var/lib/postgresql/data
      # To persist the data in the database we have a volume that persist after container deletion
      # and copy the files from the container to the volume.

  listener:
    build:
      context: ./listener
      dockerfile: Dockerfile
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
    container_name: listener_container
    networks:
      - mqtt-network
    restart: unless-stopped
    volumes:
    - ./listener/:/listener/
=======
    ports:
      - "9000:9000"
    networks:
      - mqtt-network
    container_name: listener_container
    restart: always
    command: python mqtt_listener.py
>>>>>>> a4f89e8 (Adde listener and publisher, started ticket model)
=======
    networks:
      - mqtt-network
    container_name: listener_container
>>>>>>> 459eea5 (Ticket model, mqtt non funcional)
    depends_on:
      - fastapi_app

  publisher:
    build:
      context: .
      dockerfile: Dockerfile.pub
    ports:
      - "9001:9001"
    networks:
      - app-network
      - mqtt-network
    container_name: publisher_container
    restart: always
    volumes:
<<<<<<< HEAD
<<<<<<< HEAD
      - ./publisher:/publisher/publisher
=======
    - ./listener/mqtt_listener.py:/listener/mqtt_listener.py

  publisher:
    build:
      context: ./publisher
      dockerfile: Dockerfile
    ports:
      - "9001:9001"
    networks:
      - mqtt-network
    container_name: publisher_container
    restart: always
    command: python mqtt_publisher.py
    depends_on:
      - fastapi_app
    volumes:
      - ./publisher/mqtt_publisher.py:/publisher/mqtt_publisher.py
>>>>>>> a4f89e8 (Adde listener and publisher, started ticket model)
=======
    - ./listener/listener.py:/listener/listener.py
=======
    container_name: listener_container
    networks:
      - mqtt-network
    restart: unless-stopped
    volumes:
<<<<<<< HEAD
    - ./listener/:/listener/listener
>>>>>>> 78f69df (listener corriendo correctamente)
=======
    - ./listener/:/listener/
    depends_on:
      - fastapi_app
>>>>>>> 61e2def (deploy ready)

<<<<<<< HEAD
  # publisher:
  #   build:
  #     context: ./publisher
  #     dockerfile: Dockerfile
  #   ports:
  #     - "9001:9001"
  #   networks:
  #     - mqtt-network
  #   container_name: publisher_container
  #   restart: always
  #   depends_on:
  #     - fastapi_app
  #   volumes:
  #     - ./publisher/mqtt_publisher.py:/publisher/mqtt_publisher.py
>>>>>>> 459eea5 (Ticket model, mqtt non funcional)
=======
  publisher:
    build:
      context: .
      dockerfile: Dockerfile.pub
    ports:
      - "9001:9001"
    networks:
      - app-network
      - mqtt-network
    container_name: publisher_container
    restart: always
    volumes:
<<<<<<< HEAD
      - ./publisher/mqtt_publisher.py:/publisher/mqtt_publisher.py
>>>>>>> e7a2b5d (Cambios tickets)
=======
      - ./publisher:/publisher/publisher
>>>>>>> 61e2def (deploy ready)

networks:
  app-network:
    driver: bridge
  mqtt-network:
    driver: bridge

volumes: # All the named volumes needed to persist data after container deletion
  db-volume: